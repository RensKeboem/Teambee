/*! tailwindcss v4.0.14 | MIT License | https://tailwindcss.com */
.pointer-events-none {
  pointer-events: none;
}
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}
.absolute {
  position: absolute;
}
.fixed {
  position: fixed;
}
.relative {
  position: relative;
}
.static {
  position: static;
}
.sticky {
  position: sticky;
}
.z-0 {
  z-index: 0;
}
.z-10 {
  z-index: 10;
}
.z-50 {
  z-index: 50;
}
.container {
  width: 100%;
}
.mx-auto {
  margin-inline: auto;
}
.block {
  display: block;
}
.flex {
  display: flex;
}
.grid {
  display: grid;
}
.hidden {
  display: none;
}
.inline-flex {
  display: inline-flex;
}
.h-\[40vh\] {
  height: 40vh;
}
.h-\[300px\] {
  height: 300px;
}
.h-full {
  height: 100%;
}
.h-screen {
  height: 100vh;
}
.min-h-screen {
  min-height: 100vh;
}
.w-\[200\%\] {
  width: 200%;
}
.w-auto {
  width: auto;
}
.w-full {
  width: 100%;
}
.flex-1 {
  flex: 1;
}
.\[transform\:scaleY\(-1\)\] {
  transform: scaleY(-1);
}
.transform {
  transform: var(--tw-rotate-x) var(--tw-rotate-y) var(--tw-rotate-z) var(--tw-skew-x) var(--tw-skew-y);
}
.resize {
  resize: both;
}
.flex-col {
  flex-direction: column;
}
.items-center {
  align-items: center;
}
.items-start {
  align-items: flex-start;
}
.justify-between {
  justify-content: space-between;
}
.justify-center {
  justify-content: center;
}
.rounded-full {
  border-radius: calc(infinity * 1px);
}
.border {
  border-style: var(--tw-border-style);
  border-width: 1px;
}
.border-t {
  border-top-style: var(--tw-border-style);
  border-top-width: 1px;
}
.border-b {
  border-bottom-style: var(--tw-border-style);
  border-bottom-width: 1px;
}
.border-\[\#3D2E7C\] {
  border-color: #3D2E7C;
}
.bg-\[\#1B1947\] {
  background-color: #1B1947;
}
.bg-\[\#3D2E7C\] {
  background-color: #3D2E7C;
}
.bg-\[\#3D2E7C\]\/20 {
  background-color: color-mix(in oklab, #3D2E7C 20%, transparent);
}
.bg-\[\#94C46F\] {
  background-color: #94C46F;
}
.bg-\[\#94C46F\]\/20 {
  background-color: color-mix(in oklab, #94C46F 20%, transparent);
}
.bg-\[\#E8973A\]\/20 {
  background-color: color-mix(in oklab, #E8973A 20%, transparent);
}
.bg-\[\#F8F7FB\] {
  background-color: #F8F7FB;
}
.object-contain {
  object-fit: contain;
}
.object-cover {
  object-fit: cover;
}
.text-center {
  text-align: center;
}
.text-\[\#1B1947\] {
  color: #1B1947;
}
.text-\[\#3D2E7C\] {
  color: #3D2E7C;
}
.text-\[\#E8973A\] {
  color: #E8973A;
}
.italic {
  font-style: italic;
}
.opacity-15 {
  opacity: 15%;
}
.transition-all {
  transition-property: all;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}
.transition-colors {
  transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}
.transition-transform {
  transition-property: transform, translate, scale, rotate;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}
.duration-300 {
  --tw-duration: 300ms;
  transition-duration: 300ms;
}
.hover\:bg-\[\#3D2E7C\]\/10 {
  &:hover {
    @media (hover: hover) {
      background-color: color-mix(in oklab, #3D2E7C 10%, transparent);
    }
  }
}
.hover\:bg-\[\#3D2E7C\]\/90 {
  &:hover {
    @media (hover: hover) {
      background-color: color-mix(in oklab, #3D2E7C 90%, transparent);
    }
  }
}
.hover\:bg-\[\#94C46F\]\/90 {
  &:hover {
    @media (hover: hover) {
      background-color: color-mix(in oklab, #94C46F 90%, transparent);
    }
  }
}
.hover\:underline {
  &:hover {
    @media (hover: hover) {
      text-decoration-line: underline;
    }
  }
}
.hover\:opacity-75 {
  &:hover {
    @media (hover: hover) {
      opacity: 75%;
    }
  }
}
.focus-visible\:border-\[\#3D2E7C\] {
  &:focus-visible {
    border-color: #3D2E7C;
  }
}
.focus-visible\:ring-2 {
  &:focus-visible {
    --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentColor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
}
.focus-visible\:ring-\[\#3D2E7C\] {
  &:focus-visible {
    --tw-ring-color: #3D2E7C;
  }
}
.focus-visible\:ring-\[\#94C46F\] {
  &:focus-visible {
    --tw-ring-color: #94C46F;
  }
}
.focus-visible\:ring-offset-2 {
  &:focus-visible {
    --tw-ring-offset-width: 2px;
    --tw-ring-offset-shadow: var(--tw-ring-inset,) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  }
}
.focus-visible\:ring-offset-\[\#1B1947\] {
  &:focus-visible {
    --tw-ring-offset-color: #1B1947;
  }
}
.focus-visible\:outline-none {
  &:focus-visible {
    --tw-outline-style: none;
    outline-style: none;
  }
}
.dark\:opacity-10 {
  @media (prefers-color-scheme: dark) {
    opacity: 10%;
  }
}
@layer base {
  :root {
    --color-primary: #3D2E7C;
    --color-secondary: #E8973A;
    --color-accent: #94C46F;
  }
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
  initial-value: rotateX(0);
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
  initial-value: rotateY(0);
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
  initial-value: rotateZ(0);
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
  initial-value: skewX(0);
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
  initial-value: skewY(0);
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-duration {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
